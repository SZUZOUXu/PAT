//进制转换类
1010 Input:N1 N2 tag Radix
N1在Radix进制的条件下找到一个N2的进制使得N2 == N1
1.N1、N2在10进制的条件下进行比较
2.N2的Radix的范围:(最小的N2的位值+1,10进制的N1+1)
N1=10,N2=a;  使得N2==N1的Radix为10进制的N1+1=11
3.二分法

1015 Input:N D
N在D进制下是否是一个reversible prime
直接实现了10进制->radix进制，在radix进制下逆转，再->10进制
int reverse(int N, int radix) {
	int tmp = 0;
	while (N) {
		tmp = tmp * radix + N % radix;
		N = N / radix;
	}
	return tmp;
}

//排队问题
1014 Input:N M K Q N个窗户每个窗户M个人queue
1.最大容量为N*M;大于此数的统一等候
2.Window 包括队首完成的时间、队尾完成的时间、当前的队列
3.根据队首完成的时间入队，队尾完成的时间计算服务时间

1017 Input:N K N个人K个窗户priority_queue
与1014的区别在于没有限定每个窗户的人数 采用优先队列priority_queue，保证入队后也保持有序状态
1.P 包括来的时间、等待的时间
2.priority_queue<int, vector<int>, greater<int>>q;//按照到达银行的时间进行升序排序的优先队列
3.1014不能用优先队列是因为1014需要判断是入的哪一条队，用队尾完成的时间计算这个人服务完成的时间

1026 比较难的模拟排序
要有函数找下一个VIP在哪
1.当前的人是VIP的情况
有空闲的VIP桌子-分配VIP桌子
无空闲的VIP桌子-分配普通桌子
2.当前的人不是VIP的情况
要分配的桌子是VIP的情况-看看VIP能不能抢了
不是VIP-直接分配了

//找规律
1039
关键在于找到当前位出现1的次数
higher = N / (factor * 10);//当前位的高位
lower = N - (N / factor) * factor;//当前位的低位
cur = (N / factor) % 10;//当前位
1.当前位是0，由更高位决定
2.当前位是1，有高位和低位决定
3.当前位>1，由更高位决定

//模拟堆栈
1051
int stack[1010] = { 0 }, top = 0;//创建一个栈
比较栈顶元素和给定序列之间的关系
1.栈顶元素更小-入栈直到和栈顶元素和序列元素相同
2.相等-出栈
3.栈顶元素更大-不符合堆栈的规则如312

//比赛名次
1056 Mice and Rice
分组决胜负晋级的思想-queue,胜者晋级，败者相同的名次
利用play order取每个一小鼠的weight并入队,在修改rank的过程中用present order,最后用playing order 排序就回到了最初的顺序
1.playing order 和 present order 不同
Weight:       25 18 0 46 37 3 19 22 57 56 10

playing order: 6 0 8 7 10 5 9 1 4 2 3 (原本小鼠在的位置的下标)
queue:        19 25 57 22 10 3 56 18 47 0 46
present order: 0 1 2 3 4  5 6 7 8 9 10(排成了playing order后小鼠的下标)

因此入队时Weight[6] = 19 Weight[0] = 25 ...
queue:    19 25 57 22 10 3 56 18 47 0 46
3.w[temp.porder].rank = group + 1;一轮一轮地修改rank
并存取group内的max重新入队,如果当前剩下的老鼠可以分为group组，那么这一组里面没有晋级的老鼠排名就是group+1

//set的应用
1063 Set Similarity 
找出两个集合中相同和不同的元素比值
set<int>s;递增+无重复元素
存入vector<set<int>>v(N);方便比较
for (auto it = v[a - 1].begin();it != v[a - 1].end(); it++) {
	if (v[b - 1].find(*it) != v[b - 1].end())
		Nc++;//有重复的
	else
		Nt++;//无重复的
}
